basePath: /
definitions:
  models.CreateUserInput:
    properties:
      age:
        type: integer
      avatar:
        type: string
      bio:
        type: string
      gender:
        type: string
      is_admin:
        type: boolean
      name:
        type: string
      telegram_id:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.UnauthorisedResponse:
    properties:
      message:
        type: string
    type: object
  models.UpdateUserInput:
    properties:
      avatar:
        type: string
      bio:
        type: string
      is_admin:
        type: boolean
      name:
        type: string
    type: object
  models.UserView:
    properties:
      age:
        type: integer
      avatarUrl:
        type: string
      bio:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для управления пользователями.
  title: Users API
  version: "1.0"
paths:
  /users:
    get:
      description: Возвращает список всех пользователей.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserView'
            type: array
        "401":
          description: Неавторизованный запрос
          schema:
            $ref: '#/definitions/models.UnauthorisedResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить список всех пользователей
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Создает пользователя с предоставленными данными.
      parameters:
      - description: Данные для создания пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserView'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Создать нового пользователя
      tags:
      - users
  /users/{id}:
    delete:
      description: Удаляет пользователя по telegram ID.
      parameters:
      - description: Telegram ID пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Неавторизованный запрос
          schema:
            $ref: '#/definitions/models.UnauthorisedResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Удалить пользователя
      tags:
      - users
    get:
      description: Возвращает пользователя по его telegram ID.
      parameters:
      - description: Telegram ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserView'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Неавторизованный запрос
          schema:
            $ref: '#/definitions/models.UnauthorisedResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить пользователя по ID в telegram
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Обновляет информацию о пользователе по telegram ID.
      parameters:
      - description: Telegram ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserInput'
      responses:
        "204":
          description: No Content
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Неавторизованный запрос
          schema:
            $ref: '#/definitions/models.UnauthorisedResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Обновить данные пользователя
      tags:
      - users
  /users/login:
    get:
      description: Авторизует пользователя, используя telegram ID из контекста.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserView'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Неавторизованный запрос
          schema:
            $ref: '#/definitions/models.UnauthorisedResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Возвращает текущего авторизованного пользователя
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
